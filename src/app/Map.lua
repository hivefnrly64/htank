---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Chata.
--- DateTime: 2019/3/7 1:27
---
local Common=require "app.Common"
local Map=class("Map")
local Block=require("app.Block")

function Map:ctor(node)
    self.map={}
    self.node=node

    for x=0,Common.MAP_WIDTH-1 do
        for y=0,Common.MAP_HEIGHT-1 do
            --如果在边缘则为钢铁，否则是泥土
            if x==0 or x==Common.MAP_WIDTH-1 or y==0 or y==Common.MAP_HEIGHT-1 then
                self:set(x,y,"steel")
            else
                self:set(x,y,"mud")
            end
        end
    end

end

function Map:get(x,y)
    if x<0 or y<0 then
        return nil
    end
    if x>=Common.MAP_WIDTH or y>=Common.MAP_HEIGHT then
        return nil
    end
    return self.map[x*Common.MAP_HEIGHT+y]
end

function Map:set(x,y,type)
    local block=self.map[x*Common.MAP_WIDTH+y]
    if block==nil then
        block=Block.new(self.node)
    end
    --block:setPos(x,y)
    local px,py=block:setPos(x,y)
    --print(px,py,"Map:set")
    self.map[x*Common.MAP_HEIGHT+y]=block
    Block:reset(type,px,py)
    block.x=x
    block.y=y
end

function Map:collideWithBlock(r,x,y)

  local block=self:get(x,y)
    --假如超出范围
    if block==nil then
        return nil
    end

    --print(block.damping)
    --小于1代表可以穿过
    if block.damping<1 then
            return nil
    end
    if Common.rectIntersect(r,block:getRect())~=nil then
        return block
    end

    return nil
end

function Map:collide(posx,posy,ex)

    local objRect=Common.newRect(posx,posy,ex)

    for x=0,Common.MAP_WIDTH-1 do
        for y=0,Common.MAP_HEIGHT-1 do
            local b=self:collideWithBlock(objRect,x,y)
            if b~=nil then
                return b
            end
        end
    end

    return nil
end

return Map


