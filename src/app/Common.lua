---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Chata.
--- DateTime: 2019/3/7 0:55
---

local Common=class("Common")

Common.cGridSize=32
Common.cHalfGrid=Common.cGridSize/2

Common.MAP_WIDTH=16
Common.MAP_HEIGHT=16

function Common.getIntPart(x)
    if x<0 then
        --取整数部分
        --return math.ceil(x)
        return math.cell(x)
    end
    if math.ceil(x)==x then
        --x=math.ceil(x)
        x=math.cell(x)
    else
        x=math.ceil(x)-1
    end
    return x
end

--x,y轴偏移量
local PosOffsetX=Common.cGridSize*Common.MAP_WIDTH*0.5-Common.cHalfGrid
local PosOffsetY=Common.cGridSize*Common.MAP_HEIGHT*0.5-Common.cHalfGrid

function Common.grid2Pos(x,y)
    local visibleSize=cc.Director:getInstance():getVisibleSize()
    local origin=cc.Director:getInstance():getVisibleOrigin()

    local finalX=origin.x+visibleSize.width*0.5+x*Common.cGridSize-PosOffsetX
    local finalY=origin.y+visibleSize.height*0.5+y*Common.cGridSize-PosOffsetY

    return finalX,finalY
end

function Common.pos2Gird(posx,posy)
    local visibleSize=cc.Director:getInstance():getVisibleSize()
    local origin=cc.Director:getInstance():getVisibleOrigin()

    local x=(posx-origin.x-visibleSize.width*0.5+PosOffsetX)/Common.cGridSize
    local y=(posy-origin.y-visibleSize.height*0.5+PosOffsetY)/Common.cGridSize

    print(Common.getIntPart(x+0.5),Common.getIntPart(y+0.5))
    return Common.getIntPart(x+0.5),Common.getIntPart(y+0.5)
end

function Common.newRect(x,y,ex)
    ex=ex and ex or 0

    return {
        left=x-Common.cHalfGrid-ex,
        top=y+Common.cHalfGrid+ex,
        right=x+Common.cHalfGrid+ex,
        bottom=y-Common.cHalfGrid-ex,
        width=function(self)
            return math.abs(self.right-self.left)
        end,
        height=function(self)
            return math.abs(self.bottom-self.top)
        end,
        center=function(self)
            return x,y
        end,
        tostring=function(self)
            return string.format("%d%d%d%d",self.left,self.top,self.right,self.bottom)
        end
    }
end

--计算交叉的地方
function Common.rectIntersect(r1,r2)

    if r1:width()==0 or r1:height()==0 then
        return r2
    end

    if r2:width()==0 or r2:height()==0 then
        return r1
    end

    local left=math.max(r1.left,r2.left)
    if left>=r1.right or left>=r2.right then
        return nil
    end

    local right=math.min(r1.right,r2.right)
    if right<=r1.left or right<=r2.left then
        return nil
    end

    local top=math.min(r1.top,r2.top)
    if top<=r1.bottom or top<=r2.bottom then
        return nil
    end

    local bottom=math.max(r1.bottom,r2.bottom)
    if bottom>=r1.top or bottom>=r2.top then
        return nil
    end

    return Common.newRect(left,top,right,bottom)
end

function Common.rectHit(r,x,y)
    return x>=r.left and x<=r.right and y>=r.bottom and y<=r.top
end

return Common